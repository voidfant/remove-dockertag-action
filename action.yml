name: 'Github Docker tag delete'
description: 'Action allows you to remove Docker tags from the package repository in Github'
inputs:
  tag_name:
    description: 'Name of Docker tag to delete'
    required: true
  github_token:
    description: 'GITHUB_TOKEN is required to login to Container registry and use Github API'
    required: true
  is_organization:
    description: 'Organization accounts have different API endpoints. Set this to true to use it within org'
    required: false
    type: boolean
    default: false
  private_repo_token:
    description: 'GITHUB_TOKEN with access to private repository'
    default: ''

runs:
  using: "composite"  
  steps: 
    - name: Checkout if private repository
      if: ${{ inputs.private_repo_token != '' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.GH_ACTION_REPOSITORY }}
        token: ${{ inputs.private_repo_token }}
      env:
        GH_ACTION_REPOSITORY: ${{ github.action_repository }}   

    - name: Checkout repository
      if: ${{ inputs.private_repo_token == '' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.GH_ACTION_REPOSITORY }}
      env:
        GH_ACTION_REPOSITORY: ${{ github.action_repository }}   

    - name: Log in to the Container registry
      uses: docker/login-action@v3.0.0
      with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ inputs.github_token }}

    - name: Set ENV variables
      shell: bash
      run: | 
        echo "CURRENT_TIME=$(date +%Y-%m-%d_%H-%M-%S)" >> $GITHUB_ENV
        echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV

    - name: Check if user or organization
      shell: bash
      run: |
        if [ ${{ inputs.is_organization }} == "true" ]; then
          echo "GH_API_PREFIX=orgs" >> $GITHUB_ENV
        else
          echo "GH_API_PREFIX=users" >> $GITHUB_ENV
        fi

    - name: Lowercase repository
      shell: bash
      run: |
        echo "GITHUB_REPOSITORY_LOWERCASE=${GITHUB_REPOSITORY@L}" >> $GITHUB_ENV

    # Retrieve all package versions with the specified tag name
    - name: Get package ids for the tag
      id: get-package-ids
      shell: bash
      run: |
        GH_package_ids=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /${{env.GH_API_PREFIX}}/${{github.repository_owner}}/packages/container/${{env.REPO_NAME}}/versions | \
          jq -r '.[] | select(.metadata.container.tags[] == "${{ inputs.tag_name }}") | .id')

        echo "GH_package_ids=$GH_package_ids" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    # Iterate over the IDs and delete each one
    - name: Delete packages by ids
      if: ${{ env.GH_package_ids != '' }}
      shell: bash
      run: |
        for id in $GH_package_ids; do
          echo "Deleting package version with ID: $id"
          gh api \
          --method DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /${{env.GH_API_PREFIX}}/${{github.repository_owner}}/packages/container/${{env.REPO_NAME}}/versions/$id
        done
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
